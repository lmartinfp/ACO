package Esqueleto2;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;



public class Test {
    public static void main(String[] args) {
    	
    	String cadena; //String para guardar lo que se introduzca por teclado
    	int opcion = 0; //Guardar la opción en formato entero
    	String network= "";
    	int traffic[][] = null;
    	int adjacency[][] = null;
    	int capacity[][] = null;
    	do {
    	System.out.println("Elegir topología:");
    	System.out.println("1- Topología 1");
    	System.out.println("2- Topología 2");
    	System.out.println("3- Topología 3");
    	System.out.println("4- Topología 4");
    	System.out.println("5- Topología 5");
    	System.out.println("6- Topología 6");
    	System.out.println("7- Topología 7");
    	System.out.println("8- Topología 8");
    	System.out.println("9- Topología 9");
    	System.out.println("10- Abilene 1");
    	System.out.println("11- Abilene 2");
    	System.out.println("12- Abilene 3");
    	System.out.println("13- RedIris 1");
    	System.out.println("0- Salir");
    	System.out.println("Topología-");
    	
    	
    	Scanner sc = new Scanner(System.in); //Scanner para leer la entrada por teclado
    	cadena = sc.nextLine(); //Leer la opción
    	
    	opcion = Integer.parseInt(cadena); //True si es un número false si no lo es

    	}while(opcion<0||opcion>13);
    	
    	
		switch(opcion) {
		case 1:
		//  --------------------------------------------------TOPOLOGIA 1-------------------------------------------
	    	network= "Topologia 1";
	    	 traffic = new int[][] { 
	    		{ 0, 10, 10, 10, 0},
	            { 10, 0, 10, 0, 10},
	            { 10, 10, 0, 10, 10},
	            { 10, 0, 10, 0, 10},
	            { 0, 10, 10, 10, 0},
	             };
	             adjacency = new int[][] { 
	         		{ 0, 1, 1, 1, 0},
	                { 1, 0, 1, 0, 1},
	                { 1, 1, 0, 1, 1},
	                { 1, 0, 1, 0, 1},
	                { 0, 1, 1, 1, 0},
	                  };
	                  capacity = new int[][] { 
	               		  { 0, 100, 100, 100, 0},
	                      { 100, 0, 100, 0, 100},
	                      { 100, 100, 0, 100, 100},
	                      { 100, 0, 100, 0, 100},
	                      { 0, 100, 100, 100, 0},
	                        };  
	                        
			break;
		case 2:
		   	// -------------------------------------------------TOPOLOGIA 2------------------------------------------
	    	network= "Topologia 2";
	    	traffic = new int[][] { 
	    		{ 0, 60, 10, 10, 0},
	            { 60, 0, 10, 0, 10},
	            { 10, 10, 0, 10, 10},
	            { 10, 0, 10, 0, 10},
	            { 0, 10, 10, 10, 0},
	             };
	              adjacency = new int[][] { 
	         		{ 0, 1, 1, 1, 0},
	                { 1, 0, 1, 0, 1},
	                { 1, 1, 0, 1, 1},
	                { 1, 0, 1, 0, 1},
	                { 0, 1, 1, 1, 0},
	                  };
	             capacity = new int[][] { 
	               		  { 0, 100, 100, 100, 0},
	                      { 100, 0, 100, 0, 100},
	                      { 100, 100, 0, 100, 100},
	                      { 100, 0, 100, 0, 100},
	                      { 0, 100, 100, 100, 0},
	                        }; 
			break;
        case 3:
        	//-----------------------------------------------TOPOLOGIA 3----------------------------------------------------------
        	network= "Topologia 3";                        
                    	 traffic= new int[][] { 
                        		{ 0, 60, 10, 5, 0},
                                { 60, 0, 10, 0, 10},
                                { 10, 10, 0, 10, 10},
                                { 5, 0, 10, 0, 5},
                                { 0, 10, 10, 5, 0},
                                 };
                                adjacency = new int[][] { 
                             		{ 0, 1, 1, 1, 0},
                                    { 1, 0, 1, 0, 1},
                                    { 1, 1, 0, 1, 1},
                                    { 1, 0, 1, 0, 1},
                                    { 0, 1, 1, 1, 0},
                                      };
                                 capacity = new int[][] { 
                                   		  { 0, 100, 100, 100, 0},
                                          { 100, 0, 100, 0, 100},
                                          { 100, 100, 0, 100, 100},
                                          { 100, 0, 100, 0, 100},
                                          { 0, 100, 100, 100, 0},
                                            };                 

			break;
			
		case 4:
		    //----------------------------------------------TOPOLOGIA 4---------------------------------------------------  
	    	network= "Topologia 4";                                        
	                    traffic = new int[][] { 
	             		{ 0, 60, 10, 5, 0},
	                    { 60, 0, 10, 0, 5},
	                    { 10, 10, 0, 10, 10},
	                    { 5, 0, 10, 0, 5},
	                    { 0, 5, 10, 5, 0},
	                    };
	                    adjacency = new int[][] { 
	                      { 0, 1, 1, 1, 0},
	                      { 1, 0, 1, 0, 1},
	                      { 1, 1, 0, 1, 1},
	                      { 1, 0, 1, 0, 1},
	                      { 0, 1, 1, 1, 0},
	                     };
	                    capacity = new int[][] { 
	                     { 0, 100, 100, 100, 0},
	                     { 100, 0, 100, 0, 100},
	                     { 100, 100, 0, 100, 100},
	                     { 100, 0, 100, 0, 100},
	                     { 0, 100, 100, 100, 0},
	                       };                             
	         
			break;
		case 5:
		      //-----------------------------------------TOPOLOGIA 5(misma que la 1)--------------------------------------------------- 
	    	network= "Topologia 5";   	
	    	traffic = new int[][] { 
			{ 0, 10, 10, 10, 0},
	        { 10, 0, 10, 0, 10},
	        { 10, 10, 0, 10, 10},
	        { 10, 0, 10, 0, 10},
	        { 0, 10, 10, 10, 0},
	         };
	          adjacency = new int[][] { 
	     		{ 0, 1, 1, 1, 0},
	            { 1, 0, 1, 0, 1},
	            { 1, 1, 0, 1, 1},
	            { 1, 0, 1, 0, 1},
	            { 0, 1, 1, 1, 0},
	              };
	          capacity = new int[][] { 
	           		  { 0, 100, 100, 100, 0},
	                  { 100, 0, 100, 0, 100},
	                  { 100, 100, 0, 100, 100},
	                  { 100, 0, 100, 0, 100},
	                  { 0, 100, 100, 100, 0},
	                    };                  

			break;
        case 6:
        	//-----------------------------------------TOPOLOGIA 6---------------------------------------------------
        	network= "Topologia 6";   	
                         traffic = new int[][] { 
                    		{ 0, 0, 10, 5, 0},
                            { 0, 0, 5, 0, 5},
                            { 10, 5, 0, 5, 10},
                            { 5, 0, 5, 0, 0},
                            { 0, 5, 10, 0, 0},
                             };
                              adjacency = new int[][] { 
                         		{ 0, 0, 1, 1, 0},
                                { 0, 0, 1, 0, 1},
                                { 1, 1, 0, 1, 1},
                                { 1, 0, 1, 0, 0},
                                { 0, 1, 1, 0, 0},
                                  };
                             capacity = new int[][] { 
                               		  { 0, 100, 100, 100, 0},
                                      { 100, 0, 100, 0, 100},
                                      { 100, 100, 0, 100, 100},
                                      { 100, 0, 100, 0, 100},
                                      { 0, 100, 100, 100, 0},
                                        };
			break;
			
		case 7:
			//-----------------------------------------TOPOLOGIA 7---------------------------------------------------
	    	network= "Topologia 7"; 	    	
	    	                    traffic = new int[][] { 
	    	                		{ 0, 0, 10, 5, 0},
	    	                        { 0, 0, 5, 0, 5},
	    	                        { 10, 5, 0, 5, 20},
	    	                        { 5, 0, 5, 0, 0},
	    	                        { 0, 5, 20, 0, 0},
	    	                         };
	    	                         adjacency = new int[][] { 
	    	                     		{ 0, 0, 1, 1, 0},
	    	                            { 0, 0, 1, 0, 1},
	    	                            { 1, 1, 0, 1, 1},
	    	                            { 1, 0, 1, 0, 0},
	    	                            { 0, 1, 1, 0, 0},
	    	                              };
	    	                         capacity = new int[][] { 
	    	                           		  { 0, 100, 100, 100, 0},
	    	                                  { 100, 0, 100, 0, 100},
	    	                                  { 100, 100, 0, 100, 100},
	    	                                  { 100, 0, 100, 0, 100},
	    	                                  { 0, 100, 100, 100, 0},
	    	                                    };                             
	           
			break;
		case 8:
		 	//------------------------------TOPOLOGIA 8----------------------------------------------------
	    	network= "Topologia 8";
	                                    traffic = new int[][] { 
	                                    	{ 0, 5, 0, 0, 5},
	                                        { 5, 0, 5, 0, 0},
	                                        { 0, 5, 0, 5, 0},
	                                        { 0, 0, 5, 0, 10},
	                                        { 5, 0, 0, 10, 0},
	                                          };
	                                         adjacency = new int[][] { 
	                                     		{ 0, 1, 0, 0, 1},
	                                            { 1, 0, 1, 0, 0},
	                                            { 0, 1, 0, 1, 0},
	                                            { 0, 0, 1, 0, 1},
	                                            { 1, 0, 0, 1, 0},
	                                              };
	                                          capacity = new int[][] { 
	                                        	 { 0, 100, 0, 0, 100},
	                                             { 100, 0, 100, 0, 0},
	                                             { 0, 100, 0, 100, 0},
	                                             { 0, 0, 100, 0, 100},
	                                             { 100, 0, 0, 100, 0},
	                                               };
	    	
			break;
        case 9:
        	//---------------------------------------TOPOLOGIA 9----------------------------------------------
       	network= "Topologia 9";   	
        	
         traffic = new int[][] { 
        	  { 0, 10, 0, 0, 0},
              { 10, 0, 10, 10, 0},
              { 0, 10, 0, 0, 10},
              { 0, 10, 0, 0, 10},
              { 0, 0, 10, 10, 0},
                };
             adjacency = new int[][] { 
         		{ 0, 1, 0, 0, 0},
                { 1, 0, 1, 1, 0},
                { 0, 1, 0, 0, 1},
                { 0, 1, 0, 0, 1},
                { 0, 0, 1, 1, 0},
                  };
              capacity = new int[][] { 
            	 { 0, 100, 0, 0, 0},
                 { 100, 0, 100, 100, 0},
                 { 0, 100, 0, 0, 100},
                 { 0, 100, 0, 0, 100},
                 { 0, 0, 100, 100, 0},
                   };
        	
			break;	
	    case 10:
	       	//---------------------------------------ABILENE 1----------------------------------------------
       	network= "Abilene 1";    	
  traffic = new int[][] { 
	 // 0  1  2  3  4  5  6  7  8  9  10  11
	  { 0, 5, 10, 0, 0, 0, 0, 0, 0, 0, 0,  0}, //0
	  { 5, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0,  0}, //1
	  { 10, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0,  0}, //2 
	  { 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0,  0}, //3
	  { 0, 0, 5, 0, 0, 10, 5, 0, 0, 0, 0,  0}, //4
	  { 0, 0, 0, 5, 10, 0, 0, 5, 0, 0, 0,  0}, //5
	  { 0, 0, 0, 0, 5, 0, 0, 30, 10, 0, 0,  0}, //6
	  { 0, 0, 0, 0, 0, 5, 30, 0, 0, 0, 25,  5}, //7
	  { 0, 0, 0, 0, 0, 0, 10, 0, 0, 30, 0,  0}, //8
	  { 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 15,  0}, //9
	  { 0, 0, 0, 0, 0, 0, 0, 125, 0, 15, 0,  0}, //10
	  { 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0,  0}, //11
      };
    adjacency = new int[][] { 
	 // 0  1  2  3  4  5  6  7  8  9  10  11
	  { 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0}, //0
	  { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0}, //1
	  { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0}, //2 
	  { 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0}, //3
	  { 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0,  0}, //4
	  { 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0,  0}, //5
	  { 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,  0}, //6
	  { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,  1}, //7
	  { 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  0}, //8
	  { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  0}, //9
	  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  0}, //10
	  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0}, //11
        };
    capacity = new int[][] { 
	// 0  1  2  3  4  5  6  7  8  9  10  11
 	  { 0, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0,  0}, //0
 	  { 100, 0, 100, 100, 0, 0, 0, 0, 0, 0, 0,  0}, //1
 	  { 100, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0,  0}, //2 
 	  { 0, 100, 0, 0, 0, 100, 0, 0, 0, 0, 0,  0}, //3
 	  { 0, 0, 100, 0, 0, 100, 100, 0, 0, 0, 0,  0}, //4
 	  { 0, 0, 0, 100, 100, 0, 0, 100, 0, 0, 0,  0}, //5
 	  { 0, 0, 0, 0, 100, 0, 0, 100, 100, 0, 0,  0}, //6
 	  { 0, 0, 0, 0, 0, 100, 100, 0, 0, 0, 100,  100}, //7
 	  { 0, 0, 0, 0, 0, 0, 100, 0, 0, 100, 0,  0}, //8
 	  { 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 100,  0}, //9
 	  { 0, 0, 0, 0, 0, 0, 0, 100, 0, 100, 0,  0}, //10
 	  { 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0,  0}, //11
         };
	
			break;
		case 11:
		   	//---------------------------------------ABILENE 2----------------------------------------------
      	network= "Abilene 2";
   traffic = new int[][] { 
	 // 0  1  2  3  4  5  6  7  8  9  10  11
	  { 0, 10, 50, 0, 0, 0, 0, 0, 0, 0, 0,  0}, //0
	  { 10, 0, 20, 5, 0, 0, 0, 0, 0, 0, 0,  0}, //1
	  { 50, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0,  0}, //2 
	  { 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0,  0}, //3
	  { 0, 0, 30, 0, 0, 40, 10, 0, 0, 0, 0,  0}, //4
	  { 0, 0, 0, 5, 40, 0, 0, 10, 0, 0, 0,  0}, //5
	  { 0, 0, 0, 0, 10, 0, 0, 10, 70, 0, 0,  0}, //6
	  { 0, 0, 0, 0, 0, 10, 10, 0, 0, 0, 5,  20}, //7
	  { 0, 0, 0, 0, 0, 0, 70, 0, 0, 40, 0,  0}, //8
	  { 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 5,  0}, //9
	  { 0, 0, 0, 0, 0, 0, 0, 5, 0, 20, 0,  0}, //10
	  { 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0,  0}, //11
      };
    adjacency = new int[][] { 
	 // 0  1  2  3  4  5  6  7  8  9  10  11
	  { 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0}, //0
	  { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0}, //1
	  { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0}, //2 
	  { 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0}, //3
	  { 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0,  0}, //4
	  { 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0,  0}, //5
	  { 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,  0}, //6
	  { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,  1}, //7
	  { 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  0}, //8
	  { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  0}, //9
	  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  0}, //10
	  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0}, //11
        };
    capacity = new int[][] { 
	// 0  1  2  3  4  5  6  7  8  9  10  11
 	  { 0, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0,  0}, //0
 	  { 100, 0, 100, 100, 0, 0, 0, 0, 0, 0, 0,  0}, //1
 	  { 100, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0,  0}, //2 
 	  { 0, 100, 0, 0, 0, 100, 0, 0, 0, 0, 0,  0}, //3
 	  { 0, 0, 100, 0, 0, 100, 100, 0, 0, 0, 0,  0}, //4
 	  { 0, 0, 0, 100, 100, 0, 0, 100, 0, 0, 0,  0}, //5
 	  { 0, 0, 0, 0, 100, 0, 0, 100, 100, 0, 0,  0}, //6
 	  { 0, 0, 0, 0, 0, 100, 100, 0, 0, 0, 100,  100}, //7
 	  { 0, 0, 0, 0, 0, 0, 100, 0, 0, 100, 0,  0}, //8
 	  { 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 100,  0}, //9
 	  { 0, 0, 0, 0, 0, 0, 0, 100, 0, 100, 0,  0}, //10
 	  { 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0,  0}, //11
         };	
			break;
        case 12:
        	//---------------------------------------ABILENE 3----------------------------------------------
      	network= "Abilene 3";
      	 traffic = new int[][] { 
      		 // 0  1  2  3  4  5  6  7  8  9  10  11
      		  { 0, 20, 50, 0, 0, 0, 0, 0, 0, 0, 0,  0}, //0
      		  { 20, 0, 10, 20, 0, 0, 0, 0, 0, 0, 0,  0}, //1
      		  { 50, 10, 0, 0, 30, 0, 0, 0, 0, 0, 0,  0}, //2 
      		  { 0, 20, 0, 0, 0, 40, 0, 0, 0, 0, 0,  0}, //3
      		  { 0, 0, 30, 0, 0, 5, 50, 0, 0, 0, 0,  0}, //4
      		  { 0, 0, 0, 40, 5, 0, 0, 50, 0, 0, 0,  0}, //5
      		  { 0, 0, 0, 0, 50, 0, 0, 20, 10, 0, 0,  0}, //6
      		  { 0, 0, 0, 0, 0, 50, 20, 0, 0, 0, 5,  30}, //7
      		  { 0, 0, 0, 0, 0, 0, 10, 0, 0, 40, 0,  0}, //8
      		  { 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 60,  0}, //9
      		  { 0, 0, 0, 0, 0, 0, 0, 5, 0, 60, 0,  0}, //10
      		  { 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0,  0}, //11
      	      };
      	    adjacency = new int[][] { 
      		 // 0  1  2  3  4  5  6  7  8  9  10  11
      		  { 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,  0}, //0
      		  { 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,  0}, //1
      		  { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0}, //2 
      		  { 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0}, //3
      		  { 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0,  0}, //4
      		  { 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0,  0}, //5
      		  { 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,  0}, //6
      		  { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,  1}, //7
      		  { 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,  0}, //8
      		  { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  0}, //9
      		  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,  0}, //10
      		  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,  0}, //11
      	        };
      	    capacity = new int[][] { 
      		// 0  1  2  3  4  5  6  7  8  9  10  11
      	 	  { 0, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0,  0}, //0
      	 	  { 100, 0, 100, 100, 0, 0, 0, 0, 0, 0, 0,  0}, //1
      	 	  { 100, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0,  0}, //2 
      	 	  { 0, 100, 0, 0, 0, 100, 0, 0, 0, 0, 0,  0}, //3
      	 	  { 0, 0, 100, 0, 0, 100, 100, 0, 0, 0, 0,  0}, //4
      	 	  { 0, 0, 0, 100, 100, 0, 0, 100, 0, 0, 0,  0}, //5
      	 	  { 0, 0, 0, 0, 100, 0, 0, 100, 100, 0, 0,  0}, //6
      	 	  { 0, 0, 0, 0, 0, 100, 100, 0, 0, 0, 100,  100}, //7
      	 	  { 0, 0, 0, 0, 0, 0, 100, 0, 0, 100, 0,  0}, //8
      	 	  { 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 100,  0}, //9
      	 	  { 0, 0, 0, 0, 0, 0, 0, 100, 0, 100, 0,  0}, //10
      	 	  { 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0,  0}, //11
      	         };	
			break;	
        case 13:
        	//---------------------------------------RedIris 1----------------------------------------------
      	network= "RedIris 1";
      	 traffic = new int[][] { 
      		 // 0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18
     		  { 0, 5, 100, 10, 0, 80, 60, 0, 90, 0, 80,  20,  0,  0,  60,  40,  0,  0,  100}, //0
     		  { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //1
     		  { 100, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //2 
     		  { 10, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //3
     		  { 0, 0, 0, 90, 0, 10, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //4
     		  { 80, 0, 20, 0, 10, 0, 30, 20, 30, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //5
     		  { 60, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //6
     		  { 0, 0, 0, 0, 0, 20, 0, 0, 5, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //7
     		  { 90, 0, 0, 0, 0, 30, 0, 5, 0, 10, 50,  0,  0,  0,  0,  0,  0,  0,  0}, //8
     		  { 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 25,  0,  0,  0,  0,  0,  0,  0,  0}, //9
     		  { 80, 0, 0, 0, 0, 0, 0, 0, 50, 25, 0,  10,  0,  0,  0,  0,  0,  0,  0}, //10
     		  { 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10,  0,  5,  5,  0,  0,  0,  0,  0}, //11
     		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  5,  0,  0,  0,  5,  0,  0,  0}, //12
     		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  5,  0,  0,  10,  0,  0,  0,  0}, //13
     		  { 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  10,  0,  0,  5,  0,  50}, //14
     		  { 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  5,  0,  0,  0,  0,  0,  60}, //15
     		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  5,  0,  0,  5,  0}, //16
     		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  5,  0,  90}, //17
     		  { 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  50,  60,  0,  90,  0}, //18
     	        };
      	    adjacency = new int[][] { 
      		 // 0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18
      		  { 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1,  1,  0,  0,  1,  1,  0,  0,  1}, //0
      		  { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //1
      		  { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //2 
      		  { 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //3
      		  { 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //4
      		  { 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //5
      		  { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //6
      		  { 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //7
      		  { 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1,  0,  0,  0,  0,  0,  0,  0,  0}, //8
      		  { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,  0,  0,  0,  0,  0,  0,  0,  0}, //9
      		  { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,  1,  0,  0,  0,  0,  0,  0,  0}, //10
      		  { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,  0,  1,  1,  0,  0,  0,  0,  0}, //11
      		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  0,  1,  0,  0,  0}, //12
      		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  1,  0,  0,  1,  0,  0,  0,  0}, //13
      		  { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  1,  0,  0,  1,  0,  1}, //14
      		  { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  1,  0,  0,  0,  0,  0,  1}, //15
      		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  1,  0,  0,  1,  0}, //16
      		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  1,  0,  1}, //17
      		  { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  1,  1,  0,  1,  0}, //18
      	        };
      	    capacity = new int[][] { 
         		 // 0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18
        		  { 0, 100, 100, 100, 0, 100, 100, 0, 100, 0, 100,  100,  0,  0,  100,  100,  0,  0,  100}, //0
        		  { 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //1
        		  { 100, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //2 
        		  { 100, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //3
        		  { 0, 0, 0, 100, 0, 100, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //4
        		  { 100, 0, 100, 0, 100, 0, 100, 100, 100, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //5
        		  { 100, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //6
        		  { 0, 0, 0, 0, 0, 100, 0, 0, 100, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //7
        		  { 100, 0, 0, 0, 0, 100, 0, 100, 0, 100, 100,  0,  0,  0,  0,  0,  0,  0,  0}, //8
        		  { 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 100,  0,  0,  0,  0,  0,  0,  0,  0}, //9
        		  { 100, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0,  100,  0,  0,  0,  0,  0,  0,  0}, //10
        		  { 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100,  0,  100,  100,  0,  0,  0,  0,  0}, //11
        		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  100,  0,  0,  0,  100,  0,  0,  0}, //12
        		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  100,  0,  0,  100,  0,  0,  0,  0}, //13
        		  { 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  100,  0,  0,  100,  0,  100}, //14
        		  { 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  100,  0,  0,  0,  0,  0,  100}, //15
        		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  100,  0,  0,  100,  0}, //16
        		  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  100,  0,  100}, //17
        		  { 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  100,  100,  0,  100,  0}, //18
        	        };
			break;	
		case 0:
			return;
		
		
		
		}

    	//---------------------------------------MENU----------------------------------------------
             
		
        Scanner reader = new Scanner(System.in);
   		System.out.println("Ejecutando: "+network);
         System.out.println("Seleccione ciudad de origen y destino.");
         int origen=0;
         do {
         System.out.println("Origen (0-"+(adjacency.length-1)+"): ");
        
	
			origen = reader.nextInt();
         }while(origen>(adjacency.length-1)||origen<0);	
         
         if (opcion==13) {
        	 searchCity(origen);
         }
         
         int destino=0;
         do {
         System.out.println("Destino (0-"+(adjacency.length-1)+"): ");
        
		
			destino = reader.nextInt();
    }while(origen>(adjacency.length-1)||origen<0);
         
         if (opcion==13) {
        	 searchCity(destino);
         }
               
        //Las tres matrices se utilizaran para el calculo de la matriz de carga, junto con la de distancias.          
        ACO aco = new ACO(traffic,adjacency,capacity,origen,destino,10,adjacency.length, 10, 1.d, 5.d, 0.5d);
        aco.init("cities.txt");
        
        
        aco.solve();//origen 1 destino 5
    }

	private static void searchCity(int num) {
		switch (num) {
		case 0:
			System.out.println("Nodo central");
			break;
		case 1:
			System.out.println("Madrid");
			break;
		case 2:
			System.out.println("Extremadura");
			break;
		case 3:
			System.out.println("Tenerife");
			break;
		case 4:
			System.out.println("Las palmas");
			break;
		case 5:
			System.out.println("Andalucía");
			break;
		case 6:
			System.out.println("Castilla la Mancha");
			break;
		case 7:
			System.out.println("Murcia");
			break;
		case 8:
			System.out.println("Valencia");
			break;
		case 9:
			System.out.println("Islas Baleares");
			break;
		case 10:
			System.out.println("Cataluña");
			break;
		case 11:
			System.out.println("Aragón");
			break;
		case 12:
			System.out.println("La Rioja");
			break;
		case 13:
			System.out.println("Navarra");
			break;
		case 14:
			System.out.println("País Vasco");
			break;
		case 15:
			System.out.println("Castilla y León");
			break;
		case 16:
			System.out.println("Cantabria");
			break;
		case 17:
			System.out.println("Asturias");
			break;
		case 18:
			System.out.println("Galicia");
			break;
		}
		
	}
}
